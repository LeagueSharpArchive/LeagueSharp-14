<?xml version="1.0"?>
<doc>
    <assembly>
        "LeagueSharp"
    </assembly>
    <members>
        <member name="P:LeagueSharp.Drawing.Height">
            <summary>
Screen height of the League of Legends window
</summary>
        </member>
        <member name="P:LeagueSharp.Drawing.Width">
            <summary>
Screen width of the League of Legends window
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.ScreenToWorld(System.Single,System.Single)">
            <summary>
Converts the given screen coordinates into 3D world coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.WorldToScreen(LeagueSharp.Math.Vector3)">
            <summary>
Converts the given 3D world coordinates into screen coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.WorldToMinimap(LeagueSharp.Math.Vector3)">
            <summary>
Converts the given 3D world coordinates into minimap coordinates.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.GetTextExtent(System.String)">
            <summary>
Retrieves the text extent
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawLine(System.Single,System.Single,System.Single,System.Single,System.Single,System.Drawing.Color)">
            <summary>
Draws a line on the screen with specified thickness and color
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawCircle(LeagueSharp.Math.Vector3,System.Single,System.Drawing.Color)">
            <summary>
Draws a circle at the given 3D position with the given radius in the specified color.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawText(System.Single,System.Single,System.Drawing.Color,System.String)">
            <summary>
Draws Text on the Screen.
</summary>
        </member>
        <member name="M:LeagueSharp.Drawing.DrawText(System.Single,System.Single,System.Drawing.Color,System.String,System.Object[])">
            <summary>
Draws Text on the Screen.
</summary>
        </member>
        <member name="E:LeagueSharp.Drawing.OnDraw">
            <summary>
Subscribe to this event to make use of drawing functions. 
</summary>
        </member>
        <member name="T:LeagueSharp.Drawing">
            <summary>
This class offers everything one needs to render ontop of the League of Legends window.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Rational.Equals(LeagueSharp.Math.Rational@,LeagueSharp.Math.Rational@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.Equals(LeagueSharp.Math.Rational)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.op_Inequality(LeagueSharp.Math.Rational,LeagueSharp.Math.Rational)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.op_Equality(LeagueSharp.Math.Rational,LeagueSharp.Math.Rational)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.op_Explicit(LeagueSharp.Math.Rational)~System.Single">
            <summary>
Performs an explicit conversion from <see cref="T:LeagueSharp.Math.Rational" /> to <see cref="T:System.Single" />.
</summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Rational.#ctor(System.Int32,System.Int32)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Rational" /> structure.
</summary>
            <param name="numerator">The numerator of the rational pair.</param>
            <param name="denominator">The denominator of the rational pair.</param>
        </member>
        <member name="F:LeagueSharp.Math.Rational.Denominator">
            <summary>
Gets or sets the denominator of the rational pair.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Rational.Numerator">
            <summary>
Gets or sets the numerator of the rational pair.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.Rational">
            <summary>
Defines a rational number as a numerator / denominator pair.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Ping">
            <summary>
Returns the ping.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.CursorPos">
            <summary>
Returns the 3D cursor position.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Mode">
            <summary>
Returns the current game mode.
</summary>
        </member>
        <member name="P:LeagueSharp.Game.Time">
            <summary>
Returns the ingame time.
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnGameUpdate">
            <summary>
This event is fired every time the game updates.
</summary>
        </member>
        <member name="E:LeagueSharp.Game.OnWndProc">
            <summary>
This event is fired when a window event is being processed. To prevent the game from processing
a event, you can set process to false. <see cref="T:LeagueSharp.WndEventArgs" />.
</summary>
        </member>
        <member name="M:LeagueSharp.Game.LineOfSightTest(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Checks if you have line of sight from A to B
</summary>
        </member>
        <member name="M:LeagueSharp.Game.PrintChat(System.String,System.Object[])">
            <summary>
Prints text into the game chat
</summary>
        </member>
        <member name="M:LeagueSharp.Game.PrintChat(System.String)">
            <summary>
Prints text into the game chat
</summary>
        </member>
        <member name="T:LeagueSharp.Game">
            <summary>
This class offers game relevant stuff 
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Name">
            <summary>
Gets the internal name of the buff
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.DisplayName">
            <summary>
Gets the display name of the buff, e.g. for tooltips
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.EndTime">
            <summary>
Gets the time when the buff will run out
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.StartTime">
            <summary>
Returns the starting time of the buff.
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.IsPositive">
            <summary>
Returns true if the buff is having positive effect
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.IsActive">
            <summary>
Returns true if a buff is still active
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Count">
            <summary>
Gets the stack count
</summary>
        </member>
        <member name="P:LeagueSharp.BuffInstance.Type">
            <summary>
Gets the type of the Buff
</summary>
        </member>
        <member name="T:LeagueSharp.BuffInstance">
            <summary>
Defines a BuffInstance
</summary>
        </member>
        <member name="T:LeagueSharp.BuffInstanceNotFoundException">
            <summary>
This exception is thrown when a BuffInstance object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.BuffType">
            <summary>
Every buff can be grouped into a certain type. This enum defines these.
</summary>
        </member>
        <member name="P:LeagueSharp.MenuGUI.IsChatOpen">
            <summary>
Returns whether the chat is open.
</summary>
        </member>
        <member name="T:LeagueSharp.MenuGUI">
            <summary>
This class contains information and functions regarding screen ui stuff.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Equals(LeagueSharp.Math.Plane@,LeagueSharp.Math.Plane@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Equals(LeagueSharp.Math.Plane)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.op_Inequality(LeagueSharp.Math.Plane,LeagueSharp.Math.Plane)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.op_Equality(LeagueSharp.Math.Plane,LeagueSharp.Math.Plane)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.op_Multiply(System.Single,LeagueSharp.Math.Plane)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.op_Multiply(LeagueSharp.Math.Plane,System.Single)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Multiply(LeagueSharp.Math.Plane@,System.Single,LeagueSharp.Math.Plane@)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Multiply(LeagueSharp.Math.Plane,System.Single)">
            <summary>
Scales the plane by the given scaling factor.
</summary>
            <param name="plane">The source plane.</param>
            <param name="scale">The scaling factor.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Intersects(LeagueSharp.Math.Plane,LeagueSharp.Math.BoundingSphere)">
            <summary>
Finds the intersection between a plane and a sphere.
</summary>
            <param name="plane">The source plane.</param>
            <param name="sphere">The sphere to check for intersection.</param>
            <returns>A value from the <see cref="T:LeagueSharp.Math.PlaneIntersectionType" /> enumeration describing the result of the intersection test.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Intersects(LeagueSharp.Math.Plane,LeagueSharp.Math.BoundingBox)">
            <summary>
Finds the intersection between a plane and a box.
</summary>
            <param name="plane">The source plane.</param>
            <param name="box">The box to check for intersection.</param>
            <returns>A value from the <see cref="T:LeagueSharp.Math.PlaneIntersectionType" /> enumeration describing the result of the intersection test.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Intersects(LeagueSharp.Math.Plane,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3@)">
            <summary>
Finds the intersection between a plane and a line.
</summary>
            <param name="plane">The source plane.</param>
            <param name="start">The start point of the line.</param>
            <param name="end">The end point of the line.</param>
            <param name="intersectPoint">If an intersection is found, contains the intersection point between the line and the plane.</param>
            <returns>
                <c>true</c> if an intersection is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane[],LeagueSharp.Math.Quaternion@)">
            <summary>
Transforms an array of normalized planes by a quaternion rotation.
</summary>
            <param name="planes">The normalized source planes.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed planes.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Plane@)">
            <summary>
Transforms a normalized plane by a quaternion rotation.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane,LeagueSharp.Math.Quaternion)">
            <summary>
Transforms a normalized plane by a quaternion rotation.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane[],LeagueSharp.Math.Matrix@)">
            <summary>
Transforms an array of normalized planes by a matrix.
</summary>
            <param name="planes">The normalized source planes.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>The transformed planes.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Plane@)">
            <summary>
Transforms a normalized plane by a matrix.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Transform(LeagueSharp.Math.Plane,LeagueSharp.Math.Matrix)">
            <summary>
Transforms a normalized plane by a matrix.
</summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Normalize(LeagueSharp.Math.Plane@,LeagueSharp.Math.Plane@)">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Normalize(LeagueSharp.Math.Plane)">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Normalize">
            <summary>
Changes the coefficients of the normal vector of the plane to make it of unit length.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Plane.DotNormal(LeagueSharp.Math.Plane,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the dot product of the specified vector and the normal of the plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.DotCoordinate(LeagueSharp.Math.Plane,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.Dot(LeagueSharp.Math.Plane,LeagueSharp.Math.Vector4)">
            <summary>
Calculates the dot product of the specified vector and plane.
</summary>
            <param name="plane">The source plane.</param>
            <param name="point">The source vector.</param>
            <returns>The dot product of the specified vector and plane.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Plane.#ctor(LeagueSharp.Math.Vector4)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Plane" /> class.
</summary>
            <param name="value">
A vector with the X, Y, and Z components defining the normal to the plane.
The W component defines the distance of the plane along its normal from the origin.
</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.#ctor(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Plane" /> class.
</summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.#ctor(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Plane" /> class.
</summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.#ctor(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Plane" /> class.
</summary>
            <param name="normal">The normal vector to the plane.</param>
            <param name="d">Distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:LeagueSharp.Math.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Plane" /> class.
</summary>
            <param name="a">X component of the normal defining the plane.</param>
            <param name="b">Y component of the normal defining the plane.</param>
            <param name="c">Z component of the normal defining the plane.</param>
            <param name="d">Distance of the plane along its normal from the origin.</param>
        </member>
        <member name="F:LeagueSharp.Math.Plane.D">
            <summary>
The distance of the plane along its normal from the origin.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Plane.Normal">
            <summary>
The normal vector of the plane.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.Plane">
            <summary>
Defines a plane in three dimensions.
</summary>
            <unmanaged>D3DXPLANE</unmanaged>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Equals(LeagueSharp.Math.Ray@,LeagueSharp.Math.Ray@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Equals(LeagueSharp.Math.Ray)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.op_Inequality(LeagueSharp.Math.Ray,LeagueSharp.Math.Ray)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.op_Equality(LeagueSharp.Math.Ray,LeagueSharp.Math.Ray)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Intersects(LeagueSharp.Math.Ray,LeagueSharp.Math.BoundingSphere,System.Single@)">
            <summary>
Determines whether a ray intersects the specified object.
</summary>
            <param name="ray">The ray which will be tested for intersection.</param>
            <param name="sphere">A sphere that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance at which the ray intersected the plane.</param>
            <returns>
                <c>true</c> if the ray intersects the plane; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Intersects(LeagueSharp.Math.Ray,LeagueSharp.Math.BoundingBox,System.Single@)">
            <summary>
Determines whether a ray intersects the specified object.
</summary>
            <param name="ray">The ray which will be tested for intersection.</param>
            <param name="box">A box that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance at which the ray intersected the plane.</param>
            <returns>
                <c>true</c> if the ray intersects the plane; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Intersects(LeagueSharp.Math.Ray,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single@,System.Single@,System.Single@)">
            <summary>
Determines whether a ray intersects the specified object.
</summary>
            <param name="ray">The ray which will be tested for intersection.</param>
            <param name="vertex1">The first vertex of a triangle that will be tested for intersection.</param>
            <param name="vertex2">The second vertex of a triangle that will be tested for intersection.</param>
            <param name="vertex3">The third vertex of a triangle that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance at which the ray intersected the plane.</param>
            <param name="barycentricU">When the method completes, contains the U component of the barycentric hit coordinates.</param>
            <param name="barycentricV">When the method completes, contains the V component of the barycentric hit coordinates.</param>
            <returns>
                <c>true</c> if the ray intersects the plane; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Intersects(LeagueSharp.Math.Ray,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single@)">
            <summary>
Determines whether a ray intersects the specified object.
</summary>
            <param name="ray">The ray which will be tested for intersection.</param>
            <param name="vertex1">The first vertex of a triangle that will be tested for intersection.</param>
            <param name="vertex2">The second vertex of a triangle that will be tested for intersection.</param>
            <param name="vertex3">The third vertex of a triangle that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance at which the ray intersected the plane.</param>
            <returns>
                <c>true</c> if the ray intersects the plane; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.Intersects(LeagueSharp.Math.Ray,LeagueSharp.Math.Plane,System.Single@)">
            <summary>
Determines whether a ray intersects the specified object.
</summary>
            <param name="ray">The ray which will be tested for intersection.</param>
            <param name="plane">A plane that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance at which the ray intersected the plane.</param>
            <returns>
                <c>true</c> if the ray intersects the plane; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Ray.#ctor(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Ray" /> structure.
</summary>
            <param name="position">The location of the ray's origin.</param>
            <param name="direction">A unit vector specifying the direction in which the ray is pointing.</param>
        </member>
        <member name="F:LeagueSharp.Math.Ray.Direction">
            <summary>
A unit vector specifying the direction in which the ray is pointing.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Ray.Position">
            <summary>
Specifies the location of the ray's origin.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.Ray">
            <summary>
Defines a ray in three dimensions, specified by a starting position and a direction.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Equals(LeagueSharp.Math.BoundingSphere@,LeagueSharp.Math.BoundingSphere@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Equals(LeagueSharp.Math.BoundingSphere)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.op_Inequality(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingSphere)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.op_Equality(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingSphere)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Intersects(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.Plane)">
            <summary>
Finds the intersection between a plane and a sphere.
</summary>
            <param name="sphere">The sphere to check for intersection.</param>
            <param name="plane">The source plane.</param>
            <returns>A value from the <see cref="T:LeagueSharp.Math.PlaneIntersectionType" /> enumeration describing the result of the intersection test.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Intersects(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.Ray,System.Single@)">
            <summary>
Determines whether a sphere intersects the specified object.
</summary>
            <param name="sphere">The sphere which will be tested for intersection.</param>
            <param name="ray">The ray that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance from the ray's origin in which the intersection with the sphere occured.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Intersects(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingSphere)">
            <summary>
Determines whether a sphere intersects the specified object.
</summary>
            <param name="sphere1">The first sphere which will be tested for intersection.</param>
            <param name="sphere2">The second sphere that will be tested for intersection.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Intersects(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingBox)">
            <summary>
Determines whether a sphere intersects the specified object.
</summary>
            <param name="sphere">The sphere which will be tested for intersection.</param>
            <param name="box">The box that will be tested for intersection.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Merge(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingSphere)">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingSphere" /> that is the as large as the total combined area of the two specified spheres.
</summary>
            <param name="sphere1">The first sphere to merge.</param>
            <param name="sphere2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.FromPoints(LeagueSharp.Math.Vector3[])">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingSphere" /> that fully contains the given points.
</summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.FromBox(LeagueSharp.Math.BoundingBox)">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingSphere" /> from a given box.
</summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Contains(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.Vector3)">
            <summary>
Determines whether the sphere contains the specified point.
</summary>
            <param name="sphere">The sphere that will be checked for containment.</param>
            <param name="vector">The point that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Contains(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingSphere)">
            <summary>
Determines whether the sphere contains the specified sphere.
</summary>
            <param name="sphere1">The first sphere that will be checked for containment.</param>
            <param name="sphere2">The second sphere that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.Contains(LeagueSharp.Math.BoundingSphere,LeagueSharp.Math.BoundingBox)">
            <summary>
Determines whether the sphere contains the specified box.
</summary>
            <param name="sphere">The sphere that will be checked for containment.</param>
            <param name="box">The box that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingSphere.#ctor(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.BoundingSphere" /> structure.
</summary>
            <param name="center">The center of the bounding sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="F:LeagueSharp.Math.BoundingSphere.Radius">
            <summary>
The radius of the sphere.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.BoundingSphere.Center">
            <summary>
Specifies the center point of the sphere.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.BoundingSphere">
            <summary>
A bounding sphere, specified by a center vector and a radius.
</summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:LeagueSharp.SpellData">
            <summary>
This class defines static information on a given spell. This information usually doesn't change as the game progresses.
Use this for spellshot calculations and so on.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.ToggleState">
            <summary>
Gets current spell toggle state.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.Cooldown">
            <summary>
Gets current spell cooldown.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.CooldownExpires">
            <summary>
Gets when the cooldown on the spell expires.
</summary>
        </member>
        <member name="P:LeagueSharp.SpellDataInst.Level">
            <summary>
Gets the current Level of the spell
</summary>
        </member>
        <member name="T:LeagueSharp.SpellDataInst">
            <summary>
This class defines the SpellDataInst which you can pull from a <see cref="T:LeagueSharp.Spellbook" />.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellDataInstNotFoundException">
            <summary>
This exception is thrown when a SpellDataInst object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellFlags">
            <summary>
Spells can have different flags. This enum defines those.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Equals(LeagueSharp.Math.BoundingBox@,LeagueSharp.Math.BoundingBox@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Equals(LeagueSharp.Math.BoundingBox)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.op_Inequality(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingBox)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.op_Equality(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingBox)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Intersects(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.Plane)">
            <summary>
Finds the intersection between a plane and a box.
</summary>
            <param name="box">The box to check for intersection.</param>
            <param name="plane">The source plane.</param>
            <returns>A value from the <see cref="T:LeagueSharp.Math.PlaneIntersectionType" /> enumeration describing the result of the intersection test.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Intersects(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.Ray,System.Single@)">
            <summary>
Determines whether a box intersects the specified object.
</summary>
            <param name="box">The box which will be tested for intersection.</param>
            <param name="ray">The ray that will be tested for intersection.</param>
            <param name="distance">When the method completes, contains the distance from the ray's origin in which the intersection with the box occured.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Intersects(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingSphere)">
            <summary>
Determines whether a box intersects the specified object.
</summary>
            <param name="box">The box which will be tested for intersection.</param>
            <param name="sphere">The sphere that will be tested for intersection.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Intersects(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingBox)">
            <summary>
Determines whether a box intersects the specified object.
</summary>
            <param name="box1">The first box which will be tested for intersection.</param>
            <param name="box2">The second box that will be tested for intersection.</param>
            <returns>
                <c>true</c> if the two objects are intersecting; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Merge(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingBox)">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingBox" /> that is the as large as the total combined area of the two specified boxes.
</summary>
            <param name="box1">The first box to merge.</param>
            <param name="box2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.FromSphere(LeagueSharp.Math.BoundingSphere)">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingBox" /> from a given sphere.
</summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.FromPoints(LeagueSharp.Math.Vector3[])">
            <summary>
Constructs a <see cref="T:LeagueSharp.Math.BoundingBox" /> that fully contains the given points.
</summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Contains(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.Vector3)">
            <summary>
Determines whether the box contains the specified point.
</summary>
            <param name="box">The box that will be checked for containment.</param>
            <param name="vector">The point that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Contains(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingSphere)">
            <summary>
Determines whether the box contains the specified sphere.
</summary>
            <param name="box">The box that will be checked for containment.</param>
            <param name="sphere">The sphere that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.Contains(LeagueSharp.Math.BoundingBox,LeagueSharp.Math.BoundingBox)">
            <summary>
Determines whether the box contains the specified box.
</summary>
            <param name="box1">The first box that will be checked for containment.</param>
            <param name="box2">The second box that will be checked for containment.</param>
            <returns>A member of the <see cref="T:LeagueSharp.Math.ContainmentType" /> enumeration indicating whether the two objects intersect, are contained, or don't meet at all.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.GetCorners">
            <summary>
Retrieves the eight corners of the bounding box.
</summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:LeagueSharp.Math.BoundingBox.#ctor(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.BoundingBox" /> structure.
</summary>
            <param name="minimum">The lowest corner of the box.</param>
            <param name="maximum">The highest corner of the box.</param>
        </member>
        <member name="F:LeagueSharp.Math.BoundingBox.Minimum">
            <summary>
The lowest corner of the box.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.BoundingBox.Maximum">
            <summary>
The highest corner of the box.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.BoundingBox">
            <summary>
An axis aligned bounding box, specified by minimum and maximum vectors.
</summary>
            <unmanaged>None</unmanaged>
        </member>
        <member name="T:LeagueSharp.Math.PlaneIntersectionType">
            <summary>
Describes the result of an intersection with a plane in three dimensions.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.PlaneIntersectionType.Intersecting">
            <summary>
The object is intersecting the plane.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.PlaneIntersectionType.Front">
            <summary>
The object is in front of the plane.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.PlaneIntersectionType.Back">
            <summary>
The object is behind the plane.
</summary>
        </member>
        <member name="T:LeagueSharp.Math.ContainmentType">
            <summary>
Describes how one bounding volume contains another.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.ContainmentType.Intersects">
            <summary>
The two bounding volumes overlap.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.ContainmentType.Contains">
            <summary>
One bounding volume completely contains another.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.ContainmentType.Disjoint">
            <summary>
The two bounding volumes don't intersect at all.
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot)">
            <summary>
Casts a spell
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot,LeagueSharp.Unit)">
            <summary>
Casts a spell on the given unit
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CastSpell(LeagueSharp.SpellSlot,LeagueSharp.Math.Vector3)">
            <summary>
Casts a spell at the given position
</summary>
        </member>
        <member name="M:LeagueSharp.Spellbook.CanUseSpell(LeagueSharp.SpellSlot)">
            <summary>
Gets the <see cref="T:LeagueSharp.SpellState" /> of the given spellslot.
</summary>
            <returns>The <see cref="T:LeagueSharp.SpellState" /> of the given spellslot. </returns>
        </member>
        <member name="M:LeagueSharp.Spellbook.GetManaCost(LeagueSharp.SpellSlot)">
            <summary>
Gets the mana cost of the given spellslot.
</summary>
            <returns>The mana cost of the given spellslot </returns>
        </member>
        <member name="M:LeagueSharp.Spellbook.GetSpell(LeagueSharp.SpellSlot)">
            <summary>
Gets a specified Spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.Spells">
            <summary>
Gets a array of all Spells defined in the Spellbook
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.ActiveSpellSlot">
            <summary>
Gets the active spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.SelectedSpellSlot">
            <summary>
Gets the selected spell
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.IsCastingSpell">
            <summary>
Gets if a spell is being casted currently.
</summary>
        </member>
        <member name="P:LeagueSharp.Spellbook.IsSummonerSpellbook">
            <summary>
Gets whether the spellbook is a summoner spellbook or not.
</summary>
        </member>
        <member name="T:LeagueSharp.Spellbook">
            <summary>
This class represents a spellbook of a LoL unit.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellbookNotFoundException">
            <summary>
This exception is thrown when a Spellbook object can no longer be located in memory.
</summary>
        </member>
        <member name="T:LeagueSharp.SpellState">
            <summary>
This enum defines the different states a <see cref="T:LeagueSharp.SpellDataInst" /> can have.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Utilities.CheckArrayBounds(System.Array,System.Int32,System.Int32@)">
            <summary>
Checks that a range to be read is within the boundaries of a source array, and fills in the number of elements to read if necessary.
</summary>
            <param name="data">The source array to be read from.</param>
            <param name="offset">The index at which the caller intends to begin reading from the source.</param>
            <param name="count">The number of elements intended to be read from the source. If 0 is passed, count will be adjusted to be size - offset.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="data" /> is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
        </member>
        <member name="M:LeagueSharp.Math.Utilities.CheckBounds(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
Checks that a range to be read are within the boundaries of a source.
</summary>
            <param name="lowerBound">The minimum bound that can be read from the source, and fills in the number of elements to read if necessary.</param>
            <param name="size">The total size of the source.</param>
            <param name="offset">The index at which the caller intends to begin reading from the source.</param>
            <param name="count">The number of elements intended to be read from the source. If 0 is passed, count will be adjusted to be size - offset.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset" /> is less than <paramref name="lowerBound" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative.</exception>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Equals(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Equals(LeagueSharp.Math.Vector3)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Inequality(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Equality(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Division(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Multiply(System.Single,LeagueSharp.Math.Vector3)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Multiply(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_UnaryNegation(LeagueSharp.Math.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Subtraction(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.op_Addition(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Maximize(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Maximize(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Minimize(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Minimize(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Unproject(LeagueSharp.Math.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3@)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Unproject(LeagueSharp.Math.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix)">
            <summary>
Projects a 3D vector from screen space into object space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Project(LeagueSharp.Math.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3@)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Project(LeagueSharp.Math.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix)">
            <summary>
Projects a 3D vector from object space into screen space. 
</summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3[])">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normalsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3[],System.Int32,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normalsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3*,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector3*,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normalsIn">The source normals to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3*,System.Int32,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector3*,System.Int32,System.Int32)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normalsIn">The source normals to transform.</param>
            <param name="inputStride">The stride in bytes between normals in the input.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="normalsOut">The transformed <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformNormal(LeagueSharp.Math.Vector3,LeagueSharp.Math.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3[])">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3[],System.Int32,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of coordinate vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3*,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector3*,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="count">The number of coordinate vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3*,System.Int32,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector3*,System.Int32,System.Int32)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinatesIn">The source coordinate vectors.</param>
            <param name="inputStride">The stride in bytes between vectors in the input.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="coordinatesOut">The transformed coordinate <see cref="T:LeagueSharp.Math.Vector3" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of coordinate vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.TransformCoordinate(LeagueSharp.Math.Vector3,LeagueSharp.Math.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Quaternion@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3,LeagueSharp.Math.Quaternion)">
            <summary>
Transforms a 3D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector4[])">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3[],LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector4[],System.Int32,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</param>
            <param name="offset">The offset at which to begin transforming.</param>
            <param name="count">The number of vectors to transform, or 0 to process the whole array.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3*,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector4*,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3*,System.Int32,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Vector4*,System.Int32,System.Int32)">
            <summary>
Transforms an array of 3D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectorsIn">The source vectors.</param>
            <param name="inputStride">The stride in bytes between vectors in the input.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="vectorsOut">The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</param>
            <param name="outputStride">The stride in bytes between vectors in the output.</param>
            <param name="count">The number of vectors to transform.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 3D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Transform(LeagueSharp.Math.Vector3,LeagueSharp.Math.Matrix)">
            <summary>
Transforms a 3D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Normalize(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Normalize(LeagueSharp.Math.Vector3)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Reflect(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Reflect(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Returns the reflection of a vector off a surface that has the specified normal. 
</summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Cross(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">The cross product of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Cross(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the cross product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Dot(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.DistanceSquared(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Distance(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.SmoothStep(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.SmoothStep(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Lerp(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Lerp(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Hermite(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Hermite(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Clamp(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Clamp(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.CatmullRom(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.CatmullRom(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Barycentric(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,System.Single,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Barycentric(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:LeagueSharp.Math.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Negate(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Negate(LeagueSharp.Math.Vector3)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Divide(LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Divide(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Modulate(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Modulate(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Multiply(LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Vector3@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Multiply(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Subtract(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Subtract(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Add(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Add(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector3" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.#ctor(LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector3" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector3.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector3" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:LeagueSharp.Math.Vector3.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:LeagueSharp.Math.Vector3" /> type, in bytes.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Vector3.UnitZ">
            <summary>
Gets the Z unit <see cref="T:LeagueSharp.Math.Vector3" /> (0, 0, 1).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector3" /> that has a value of (0, 0, 1).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector3.UnitY">
            <summary>
Gets the Y unit <see cref="T:LeagueSharp.Math.Vector3" /> (0, 1, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector3" /> that has a value of (0, 1, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector3.UnitX">
            <summary>
Gets the X unit <see cref="T:LeagueSharp.Math.Vector3" /> (1, 0, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector3" /> that has a value of (1, 0, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector3.Zero">
            <summary>
Gets a <see cref="T:LeagueSharp.Math.Vector3" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector3" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector3.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector3.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector3.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:LeagueSharp.Math.Vector3">
            <summary>
Defines a three component vector.
</summary>
            <unmanaged>D3DXVECTOR3</unmanaged>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Equals(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Equals(LeagueSharp.Math.Vector2)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Inequality(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Equality(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Division(LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Multiply(System.Single,LeagueSharp.Math.Vector2)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Multiply(LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_UnaryNegation(LeagueSharp.Math.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Subtraction(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.op_Addition(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Maximize(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Maximize(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Minimize(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Minimize(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformNormal(LeagueSharp.Math.Vector2[],LeagueSharp.Math.Matrix@)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normals">The normal vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed normals.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformNormal(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformNormal(LeagueSharp.Math.Vector2,LeagueSharp.Math.Matrix)">
            <summary>
Performs a normal transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformCoordinate(LeagueSharp.Math.Vector2[],LeagueSharp.Math.Matrix@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinates">The coordinate vectors to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformCoordinate(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.TransformCoordinate(LeagueSharp.Math.Vector2,LeagueSharp.Math.Matrix)">
            <summary>
Performs a coordinate transformation using the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed coordinates.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2[],LeagueSharp.Math.Quaternion@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2,LeagueSharp.Math.Quaternion)">
            <summary>
Transforms a 2D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2[],LeagueSharp.Math.Matrix@)">
            <summary>
Transforms an array of 2D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 2D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Transform(LeagueSharp.Math.Vector2,LeagueSharp.Math.Matrix)">
            <summary>
Transforms a 2D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Normalize(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Normalize(LeagueSharp.Math.Vector2)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Dot(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.DistanceSquared(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Distance(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.SmoothStep(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.SmoothStep(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Lerp(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Lerp(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Hermite(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Hermite(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Clamp(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Clamp(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.CatmullRom(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.CatmullRom(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Barycentric(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Barycentric(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:LeagueSharp.Math.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Negate(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Negate(LeagueSharp.Math.Vector2)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Divide(LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Divide(LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Modulate(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Modulate(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Multiply(LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Multiply(LeagueSharp.Math.Vector2,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Subtract(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Subtract(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Add(LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Add(LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector2" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector2.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector2" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:LeagueSharp.Math.Vector2.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:LeagueSharp.Math.Vector2" /> type, in bytes.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Vector2.UnitY">
            <summary>
Gets the Y unit <see cref="T:LeagueSharp.Math.Vector2" /> (0, 1).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector2" /> that has a value of (0, 1).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector2.UnitX">
            <summary>
Gets the X unit <see cref="T:LeagueSharp.Math.Vector2" /> (1, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector2" /> that has a value of (1, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector2.Zero">
            <summary>
Gets a <see cref="T:LeagueSharp.Math.Vector2" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector2" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector2.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector2.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:LeagueSharp.Math.Vector2">
            <summary>
Defines a two component vector.
</summary>
            <unmanaged>D3DXVECTOR2</unmanaged>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Equals(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Equals(LeagueSharp.Math.Vector4)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Inequality(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Equality(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Division(LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Multiply(System.Single,LeagueSharp.Math.Vector4)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Multiply(LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_UnaryNegation(LeagueSharp.Math.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Subtraction(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.op_Addition(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Maximize(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Maximize(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Returns a vector containing the largest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Minimize(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Minimize(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Returns a vector containing the smallest components of the specified vectors.
</summary>
            <param name="value1">The first source vector.</param>
            <param name="value2">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4[],LeagueSharp.Math.Quaternion@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vectors">The vectors to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4,LeagueSharp.Math.Quaternion)">
            <summary>
Transforms a 4D vector by the given <see cref="T:LeagueSharp.Math.Quaternion" /> rotation.
</summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:LeagueSharp.Math.Quaternion" /> rotation to apply.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4[],LeagueSharp.Math.Matrix@)">
            <summary>
Transforms an array of 4D vectors by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vectors">The source vectors.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />s.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Vector4@)">
            <summary>
Transforms a 4D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:LeagueSharp.Math.Vector4" />.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Transform(LeagueSharp.Math.Vector4,LeagueSharp.Math.Matrix)">
            <summary>
Transforms a 4D vector by the given <see cref="T:LeagueSharp.Math.Matrix" />.
</summary>
            <param name="vector">The source vector.</param>
            <param name="transformation">The transformation <see cref="T:LeagueSharp.Math.Matrix" />.</param>
            <returns>The transformed <see cref="T:LeagueSharp.Math.Vector4" />.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Normalize(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Normalize(LeagueSharp.Math.Vector4)">
            <summary>
Converts the vector into a unit vector.
</summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Dot(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Calculates the dot product of two vectors.
</summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.DistanceSquared(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Calculates the squared distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
Distance squared can often be used in place of distance if relative comparisons are being made. 
For example, consider three points A, B, and C. To determine whether B or C is further from A, 
compare the distance between A and B to the distance between A and C. Calculating the two distances 
involves two square roots, which are computationally expensive. However, using distance squared 
provides the same information and avoids calculating two square roots.
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Distance(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Calculates the distance between two vectors.
</summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.SmoothStep(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.SmoothStep(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Performs a cubic interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Lerp(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Lerp(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Performs a linear interpolation between two vectors.
</summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Hermite(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Hermite(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Performs a Hermite spline interpolation.
</summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Clamp(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Clamp(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Restricts a value to be within a specified range.
</summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.CatmullRom(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.CatmullRom(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Performs a Catmull-Rom interpolation using the specified positions.
</summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Barycentric(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,System.Single,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Barycentric(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
</summary>
            <param name="value1">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
            <returns>A new <see cref="T:LeagueSharp.Math.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Negate(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Negate(LeagueSharp.Math.Vector4)">
            <summary>
Reverses the direction of a given vector.
</summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Divide(LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Divide(LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Modulate(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Modulate(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Modulates a vector by another.
</summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Multiply(LeagueSharp.Math.Vector4@,System.Single,LeagueSharp.Math.Vector4@)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="vector">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Multiply(LeagueSharp.Math.Vector4,System.Single)">
            <summary>
Scales a vector by the given value.
</summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Subtract(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Subtract(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Subtracts two vectors.
</summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Add(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@,LeagueSharp.Math.Vector4@)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Add(LeagueSharp.Math.Vector4,LeagueSharp.Math.Vector4)">
            <summary>
Adds two vectors.
</summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Normalize">
            <summary>
Converts the vector into a unit vector.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.LengthSquared">
            <summary>
Calculates the squared length of the vector.
</summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.Length">
            <summary>
Calculates the length of the vector.
</summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector4" /> class.
</summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.#ctor(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.#ctor(LeagueSharp.Math.Vector2,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector4" /> class.
</summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:LeagueSharp.Math.Vector4.#ctor(System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Vector4" /> class.
</summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.SizeInBytes">
            <summary>
Gets the size of the <see cref="T:LeagueSharp.Math.Vector4" /> type, in bytes.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.UnitW">
            <summary>
Gets the W unit <see cref="T:LeagueSharp.Math.Vector4" /> (0, 0, 0, 1).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector4" /> that has a value of (0, 0, 0, 1).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.UnitZ">
            <summary>
Gets the Z unit <see cref="T:LeagueSharp.Math.Vector4" /> (0, 0, 1, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector4" /> that has a value of (0, 0, 1, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.UnitY">
            <summary>
Gets the Y unit <see cref="T:LeagueSharp.Math.Vector4" /> (0, 1, 0, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector4" /> that has a value of (0, 1, 0, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.UnitX">
            <summary>
Gets the X unit <see cref="T:LeagueSharp.Math.Vector4" /> (1, 0, 0, 0).
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector4" /> that has a value of (1, 0, 0, 0).</value>
        </member>
        <member name="P:LeagueSharp.Math.Vector4.Zero">
            <summary>
Gets a <see cref="T:LeagueSharp.Math.Vector4" /> with all of its components set to zero.
</summary>
            <value>A <see cref="T:LeagueSharp.Math.Vector4" /> that has all of its components set to zero.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector4.W">
            <summary>
Gets or sets the W component of the vector.
</summary>
            <value>The W component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector4.Z">
            <summary>
Gets or sets the Z component of the vector.
</summary>
            <value>The Z component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector4.Y">
            <summary>
Gets or sets the Y component of the vector.
</summary>
            <value>The Y component of the vector.</value>
        </member>
        <member name="F:LeagueSharp.Math.Vector4.X">
            <summary>
Gets or sets the X component of the vector.
</summary>
            <value>The X component of the vector.</value>
        </member>
        <member name="T:LeagueSharp.Math.Vector4">
            <summary>
Defines a four component vector.
</summary>
            <unmanaged>D3DXVECTOR4</unmanaged>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Equals(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Equals(LeagueSharp.Math.Quaternion)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Inequality(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Equality(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_UnaryNegation(LeagueSharp.Math.Quaternion)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Subtraction(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Addition(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Division(LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Multiply(System.Single,LeagueSharp.Math.Quaternion)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Multiply(LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.op_Multiply(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Multiplies a quaternion by another.
</summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Subtract(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Subtract(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Subtracts two quaternions.
</summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.SquadSetup(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Sets up control points for spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Third source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Squad(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Interpolates between quaternions, using spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Thrid source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Squad(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Interpolates between quaternions, using spherical quadrangle interpolation.
</summary>
            <param name="source1">First source quaternion.</param>
            <param name="source2">Second source quaternion.</param>
            <param name="source3">Thrid source quaternion.</param>
            <param name="source4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Slerp(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Interpolates between two quaternions, using spherical linear interpolation.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Slerp(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Interpolates between two quaternions, using spherical linear interpolation.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
Creates a quaternion given a yaw, pitch, and roll value.
</summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationMatrix(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Quaternion@)">
            <summary>
Creates a quaternion given a rotation matrix.
</summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationMatrix(LeagueSharp.Math.Matrix)">
            <summary>
Creates a quaternion given a rotation matrix.
</summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationAxis(LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Creates a quaternion given a rotation and an axis.
</summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.RotationAxis(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Creates a quaternion given a rotation and an axis.
</summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Normalize(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Normalize(LeagueSharp.Math.Quaternion)">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
            <param name="quaternion">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Negate(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Negate(LeagueSharp.Math.Quaternion)">
            <summary>
Reverses the direction of a given quaternion.
</summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Multiply(LeagueSharp.Math.Quaternion@,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Multiply(LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Scales a quaternion by the given value.
</summary>
            <param name="quaternion">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Multiply(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Modulates a quaternion by another.
</summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Multiply(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Modulates a quaternion by another.
</summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <returns>The modulated quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Logarithm(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Calculates the natural logarithm of the specified quaternion.
</summary>
            <param name="quaternion">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Logarithm(LeagueSharp.Math.Quaternion)">
            <summary>
Calculates the natural logarithm of the specified quaternion.
</summary>
            <param name="quaternion">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Lerp(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Performs a linear interpolation between two quaternions.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Lerp(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,System.Single)">
            <summary>
Performs a linear interpolation between two quaternion.
</summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Invert(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Invert(LeagueSharp.Math.Quaternion)">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Exponential(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Exponentiates a quaternion.
</summary>
            <param name="quaternion">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Exponential(LeagueSharp.Math.Quaternion)">
            <summary>
Exponentiates a quaternion.
</summary>
            <param name="quaternion">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Dot(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Calculates the dot product of two quaternions.
</summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Divide(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Divide(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Divides a quaternion by another.
</summary>
            <param name="left">The first quaternion to divide.</param>
            <param name="right">The second quaternion to divide.</param>
            <returns>The divided quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Conjugate(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Conjugates a quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Conjugate(LeagueSharp.Math.Quaternion)">
            <summary>
Conjugates a quaternion.
</summary>
            <param name="quaternion">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Barycentric(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,System.Single,System.Single,LeagueSharp.Math.Quaternion@)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="source1">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="source2">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="source3">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="weight1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="source2" />).</param>
            <param name="weight2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="source3" />).</param>
            <param name="result">When the method completes, contains a new <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Barycentric(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion,System.Single,System.Single)">
            <summary>
Returns a <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
</summary>
            <param name="source1">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="source2">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="source3">A <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="weight1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="source2" />).</param>
            <param name="weight2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="source3" />).</param>
            <returns>A new <see cref="T:LeagueSharp.Math.Quaternion" /> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Add(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Quaternion@)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Add(LeagueSharp.Math.Quaternion,LeagueSharp.Math.Quaternion)">
            <summary>
Adds two quaternions.
</summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Invert">
            <summary>
Conjugates and renormalizes the quaternion.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Conjugate">
            <summary>
Conjugates the quaternion.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Normalize">
            <summary>
Converts the quaternion into a unit quaternion.
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.LengthSquared">
            <summary>
Calculates the squared length of the quaternion.
</summary>
            <returns>The squared length of the quaternion.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.Length">
            <summary>
Calculates the length of the quaternion.
</summary>
            <returns>The length of the quaternion.</returns>
        </member>
        <member name="P:LeagueSharp.Math.Quaternion.Angle">
            <summary>
Gets the angle of the quaternion. The quaternion must be normalized.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Quaternion.Axis">
            <summary>
Gets the axis components of the quaternion. The quaternion must be normalized.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Quaternion.IsIdentity">
            <summary>
Gets a value indicating whether this instance is an identity <see cref="T:LeagueSharp.Math.Quaternion" />.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Quaternion.Identity">
            <summary>
Gets the identity <see cref="T:LeagueSharp.Math.Quaternion" /> (0, 0, 0, 1).
</summary>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.#ctor(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Quaternion" /> structure.
</summary>
            <param name="value">A <see cref="T:LeagueSharp.Math.Vector3" /> containing the first three values of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="M:LeagueSharp.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Initializes a new instance of the <see cref="T:LeagueSharp.Math.Quaternion" /> structure.
</summary>
            <param name="x">The X component of the quaternion.</param>
            <param name="y">The Y component of the quaternion.</param>
            <param name="z">The Z component of the quaternion.</param>
            <param name="w">The W component of the quaternion.</param>
        </member>
        <member name="F:LeagueSharp.Math.Quaternion.W">
            <summary>
Gets or sets the W component of the quaternion.
</summary>
            <value>The W component of the quaternion.</value>
        </member>
        <member name="F:LeagueSharp.Math.Quaternion.Z">
            <summary>
Gets or sets the Z component of the quaternion.
</summary>
            <value>The Z component of the quaternion.</value>
        </member>
        <member name="F:LeagueSharp.Math.Quaternion.Y">
            <summary>
Gets or sets the Y component of the quaternion.
</summary>
            <value>The Y component of the quaternion.</value>
        </member>
        <member name="F:LeagueSharp.Math.Quaternion.X">
            <summary>
Gets or sets the X component of the quaternion.
</summary>
            <value>The X component of the quaternion.</value>
        </member>
        <member name="T:LeagueSharp.Math.Quaternion">
            <summary>
Defines a four dimensional mathematical quaternion.
</summary>
            <unmanaged>D3DXQUATERNION</unmanaged>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Equals(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Determines whether the specified object instances are considered equal. 
</summary>
            <param name="value1" />
            <param name="value2" />
            <returns>
                <c>true</c> if <paramref name="value1" /> is the same instance as <paramref name="value2" /> or 
if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Equals(LeagueSharp.Math.Matrix)">
            <summary>
Returns a value that indicates whether the current instance is equal to the specified object. 
</summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Equals(System.Object)">
            <summary>
Returns a value that indicates whether the current instance is equal to a specified object. 
</summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
                <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.GetHashCode">
            <summary>
Returns the hash code for this instance.
</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.ToString">
            <summary>
Converts the value of the object to its equivalent string representation.
</summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Inequality(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Tests for inequality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has a different value than <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Equality(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Tests for equality between two objects.
</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                <c>true</c> if <paramref name="left" /> has the same value as <paramref name="right" />; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Multiply(System.Single,LeagueSharp.Math.Matrix)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Multiply(LeagueSharp.Math.Matrix,System.Single)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Multiply(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Multiplies two matricies.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Division(LeagueSharp.Math.Matrix,System.Single)">
            <summary>
Scales a matrix by a given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Division(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Divides two matricies.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Subtraction(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Subtracts two matricies.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_Addition(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Adds two matricies.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.op_UnaryNegation(LeagueSharp.Math.Matrix)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transformation2D(LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a 2D transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transformation2D(LeagueSharp.Math.Vector2,System.Single,LeagueSharp.Math.Vector2,LeagueSharp.Math.Vector2,System.Single,LeagueSharp.Math.Vector2)">
            <summary>
Creates a 2D transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transformation(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transformation(LeagueSharp.Math.Vector3,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Vector3)">
            <summary>
Creates a transformation matrix.
</summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.AffineTransformation2D(System.Single,LeagueSharp.Math.Vector2@,System.Single,LeagueSharp.Math.Vector2@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a 2D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.AffineTransformation2D(System.Single,LeagueSharp.Math.Vector2,System.Single,LeagueSharp.Math.Vector2)">
            <summary>
Creates a 2D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.AffineTransformation(System.Single,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a 3D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.AffineTransformation(System.Single,LeagueSharp.Math.Vector3,LeagueSharp.Math.Quaternion,LeagueSharp.Math.Vector3)">
            <summary>
Creates a 3D affine transformation matrix.
</summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transpose(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Calculates the transpose of the specified matrix.
</summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Transpose(LeagueSharp.Math.Matrix)">
            <summary>
Calculates the transpose of the specified matrix.
</summary>
            <param name="matrix">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Invert(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Calculates the inverse of the specified matrix.
</summary>
            <param name="matrix">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Invert(LeagueSharp.Math.Matrix)">
            <summary>
Calculates the inverse of the specified matrix.
</summary>
            <param name="matrix">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Translation(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Translation(LeagueSharp.Math.Vector3)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="amount">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Translation(System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
Creates a translation matrix using the specified offsets.
</summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Shadow(LeagueSharp.Math.Vector4@,LeagueSharp.Math.Plane@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that flattens geometry into a plane.
</summary>
            <param name="light">Position of the shadow light.</param>
            <param name="plane">The plane into which the geometry will be flattened.</param>
            <param name="result">When the method completes, contains the created shadow matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Shadow(LeagueSharp.Math.Vector4,LeagueSharp.Math.Plane)">
            <summary>
Creates a matrix that flattens geometry into a plane.
</summary>
            <param name="light">Position of the shadow light.</param>
            <param name="plane">The plane into which the geometry will be flattened.</param>
            <returns>The created shadow matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Scaling(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Scaling(LeagueSharp.Math.Vector3)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Scaling(System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
Creates a matrix that scales along the x-axis, y-axis, and y-axis.
</summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Reflection(LeagueSharp.Math.Plane@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that reflects the coordinate system about a plane.
</summary>
            <param name="plane">The plane about which the coordinate system will be reflected.</param>
            <param name="result">When the method completes, contains the created reflection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Reflection(LeagueSharp.Math.Plane)">
            <summary>
Creates a matrix that reflects the coordinate system about a plane.
</summary>
            <param name="plane">The plane about which the coordinate system will be reflected.</param>
            <returns>The created reflection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, customized perspective projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, perspective projection matrix based on a field of view.
</summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, perspective projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, customized orthographic projection matrix.
</summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a right-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Creates a left-handed, orthographic projection matrix.
</summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.LookAtRH(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a right-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.LookAtRH(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Creates a right-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.LookAtLH(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a left-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.LookAtLH(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Creates a left-handed, look-at matrix.
</summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
Creates a rotation matrix with a specified yaw, pitch, and roll.
</summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationQuaternion(LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a rotation matrix from a quaternion.
</summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationQuaternion(LeagueSharp.Math.Quaternion)">
            <summary>
Creates a rotation matrix from a quaternion.
</summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationAxis(LeagueSharp.Math.Vector3@,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationAxis(LeagueSharp.Math.Vector3,System.Single)">
            <summary>
Creates a matrix that rotates around an arbitary axis.
</summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationZ(System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that rotates around the z-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationZ(System.Single)">
            <summary>
Creates a matrix that rotates around the z-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationY(System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that rotates around the y-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationY(System.Single)">
            <summary>
Creates a matrix that rotates around the y-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationX(System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a matrix that rotates around the x-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.RotationX(System.Single)">
            <summary>
Creates a matrix that rotates around the x-axis.
</summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Billboard(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Vector3@,LeagueSharp.Math.Matrix@)">
            <summary>
Creates a spherical billboard that rotates around a specified object position.
</summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Billboard(LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3,LeagueSharp.Math.Vector3)">
            <summary>
Creates a spherical billboard that rotates around a specified object position.
</summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Lerp(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Performs a linear interpolation between two matricies.
</summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Lerp(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix,System.Single)">
            <summary>
Performs a linear interpolation between two matricies.
</summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end" />.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
This method performs the linear interpolation based on the following formula.
<code>start + (end - start) * amount</code>
Passing <paramref name="amount" /> a value of 0 will cause <paramref name="start" /> to be returned; a value of 1 will cause <paramref name="end" /> to be returned. 
</remarks>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Negate(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Negate(LeagueSharp.Math.Matrix)">
            <summary>
Negates a matrix.
</summary>
            <param name="matrix">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Divide(LeagueSharp.Math.Matrix@,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Divide(LeagueSharp.Math.Matrix,System.Single)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Divide(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Determines the quotient of two matrices.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Divide(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Determines the quotient of two matrices.
</summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix@,System.Single,LeagueSharp.Math.Matrix@)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix,System.Single)">
            <summary>
Scales a matrix by the given value.
</summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix[])">
            <summary>
Determines the products of of an array of matrices by a single matrix.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The matrix to multiply the matrices in the array by.</param>
            <param name="result">The array of products of the matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix[],System.Int32,System.Int32)">
            <summary>
Determines the products of of an array of matrices by a single matrix.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The matrix to multiply the matrices in the array by.</param>
            <param name="result">The array of products of the matrices.</param>
            <param name="offset">The offset at which to begin the multiplication.</param>
            <param name="count">The number of matrices to multiply, or 0 to process the entire array.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix[])">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix[],LeagueSharp.Math.Matrix[],System.Int32,System.Int32)">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
            <param name="offset">The offset at which to begin the multiplication.</param>
            <param name="count">The number of matrices to multiply, or 0 to process the entire array.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix*,LeagueSharp.Math.Matrix*,LeagueSharp.Math.Matrix*,System.Int32)">
            <summary>
Determines the products of two arrays of matrices.
</summary>
            <param name="left">The first matrix array to multiply.</param>
            <param name="right">The second matrix array to multiply.</param>
            <param name="result">The array of products of the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Determines the product of two matrices.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Multiply(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Determines the product of two matrices.
</summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Subtract(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Determines the difference between two matrices.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Subtract(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Determines the difference between two matrices.
</summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Add(LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@,LeagueSharp.Math.Matrix@)">
            <summary>
Determines the sum of two matrices.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Add(LeagueSharp.Math.Matrix,LeagueSharp.Math.Matrix)">
            <summary>
Determines the sum of two matrices.
</summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Determinant">
            <summary>
Calculates the determinant of the matrix.
</summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Decompose(LeagueSharp.Math.Vector3@,LeagueSharp.Math.Quaternion@,LeagueSharp.Math.Vector3@)">
            <summary>
Decomposes the matrix into its scalar, rotational, and translational elements.
</summary>
            <param name="scale">When the method completes, contains the scalar element of the matrix.</param>
            <param name="rotation">When the method completes, contains the translational element of the matrix.</param>
            <param name="translation">When the method completes, contains the rotational element of the matrix.</param>
            <returns>
                <c>true</c> if the decomposition was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:LeagueSharp.Math.Matrix.Invert">
            <summary>
Inverts the matrix.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Matrix.IsIdentity">
            <summary>
Gets a value indicating whether this instance is an identity matrix.
</summary>
        </member>
        <member name="P:LeagueSharp.Math.Matrix.Identity">
            <summary>
Gets a <see cref="T:LeagueSharp.Math.Matrix" /> that represents an identity matrix.
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M44">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and fourth column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M43">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and third column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M42">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and second column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M41">
            <summary>
Gets or sets the element of the matrix that exists in the fourth row and first column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M34">
            <summary>
Gets or sets the element of the matrix that exists in the third row and fourth column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M33">
            <summary>
Gets or sets the element of the matrix that exists in the third row and third column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M32">
            <summary>
Gets or sets the element of the matrix that exists in the third row and second column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M31">
            <summary>
Gets or sets the element of the matrix that exists in the third row and first column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M24">
            <summary>
Gets or sets the element of the matrix that exists in the second row and fourth column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M23">
            <summary>
Gets or sets the element of the matrix that exists in the second row and third column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M22">
            <summary>
Gets or sets the element of the matrix that exists in the second row and second column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M21">
            <summary>
Gets or sets the element of the matrix that exists in the second row and first column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M14">
            <summary>
Gets or sets the element of the matrix that exists in the first row and fourth column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M13">
            <summary>
Gets or sets the element of the matrix that exists in the first row and third column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M12">
            <summary>
Gets or sets the element of the matrix that exists in the first row and second column. 
</summary>
        </member>
        <member name="F:LeagueSharp.Math.Matrix.M11">
            <summary>
Gets or sets the element of the matrix that exists in the first row and first column. 
</summary>
        </member>
        <member name="T:LeagueSharp.Math.Matrix">
            <summary>
Defines a 4x4 matrix.
</summary>
            <unmanaged>D3DXMATRIX</unmanaged>
        </member>
    </members>
</doc>