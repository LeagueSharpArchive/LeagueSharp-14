using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using LeagueSharp;
using SharpDX;

public class PingLib
{
    public static void SendPing(PingType ptype, SendType stype, Vector3 position)
    {
        SendPing(ptype, stype, position, null);
    }

    public static void SendPing(PingType ptype, SendType stype, GameObject target)
    {
        SendPing(ptype, stype, new Vector3(), target);
    }

    public static void SendPing(PingType ptype, SendType stype, Vector3 position = new Vector3(), GameObject target = null)
    {
        if (stype == SendType.Game)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter bw = new BinaryWriter(ms);

            bw.Write((byte)0x56);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((float)position.X);
            bw.Write((float)position.Y);
            if (target == null)
            {
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
            }
            else
            {
                bw.Write((float)target.NetworkId);
            }
            switch (ptype)
            {
                case PingType.Normal:
                    bw.Write((byte)0x00);
                    break;
                case PingType.Fallback:
                    bw.Write((byte)0x05);
                    break;
                case PingType.EnemyMissing:
                    bw.Write((byte)0x03);
                    break;
                case PingType.Danger:
                    bw.Write((byte)0x02);
                    break;
                case PingType.OnMyWay:
                    bw.Write((byte)0x04);
                    break;
                case PingType.AssistMe:
                    bw.Write((byte)0x06);
                    break;
            }

            Game.SendPacket(ms.ToArray(), PacketChannel.C2S, PacketProtocolFlags.NoFlags);
        }
        else if (stype == SendType.Local)
        {
            MemoryStream ms = new MemoryStream();
            BinaryWriter bw = new BinaryWriter(ms);

            bw.Write((byte)0x3F);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((byte)0x00);
            bw.Write((float)position.X);
            bw.Write((float)position.Y);
            if (target == null)
            {
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
                bw.Write((byte)0x00);
            }
            else
            {
                bw.Write((float)target.NetworkId);
            }
            bw.Write((float)ObjectManager.Player.NetworkId);
            switch (ptype)
            {
                case PingType.Normal:
                    bw.Write((byte)0xB0);
                    break;
                case PingType.Fallback:
                    bw.Write((byte)0xB5);
                    break;
                case PingType.EnemyMissing:
                    bw.Write((byte)0xB3);
                    break;
                case PingType.Danger:
                    bw.Write((byte)0xB2);
                    break;
                case PingType.OnMyWay:
                    bw.Write((byte)0xB4);
                    break;
                case PingType.AssistMe:
                    bw.Write((byte)0xB6);
                    break;
            }

            Game.SendPacket(ms.ToArray(), PacketChannel.S2C, PacketProtocolFlags.NoFlags);
        }
    }

    public enum PingType
    {
        Normal,
        Fallback,
        EnemyMissing,
        Danger,
        OnMyWay,
        AssistMe,
    }

    public enum SendType
    {
        Game,
        Local,
    }
}